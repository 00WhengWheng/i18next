.row-fluid
  .span4
    a(name='basic')
    h4.feature-title accessing resources

  .span8
    .feature
      h6 with default namespace
      pre
        code
          | // given resourcefile translation.en.json
          | { 
          |   key1: 'value of key 1' 
          | }
          | 
          | i18n.t("key1"); // -> value of key 1

      h6 with namespaces set
      pre
        code
          | // given resourcesfile namespace1.en.json (default ns)
          | { 
          |    key1: 'value of key 1' 
          | }
          | 
          | // given additional resourcesfile namespace2.en.json
          | { 
          |   keys: { 
          |     2: 'value of key 2',
          |     3: 'value of key 3'
          |   }
          | }
          | 
          | i18n.t("key1"); // -> value of key 1
          | i18n.t("namespace1.key1"); // -> value of key 1
          | i18n.t("keys.2"); // -> missing key
          | i18n.t("namespace2:keys.2"); // -> value of key 2
          | i18n.t("namespace2:keys.3"); // -> value of key 3

      .feature-description
        p
          span.badge.badge-info Hint:
          |  You can change namespace and/or key separator by setting options on init:
          ul
            li nsseparator = ':::'
            li keyseparator = '::'
            li: code i18n.t("namespace2:::keys::2"); // -> value of key 2

.row-fluid
  .span4
    h4.feature-title multiline in json

  .span8
    .feature
      pre
        code
          | // given resources in arabic
          | {           
          |   'en-US': { 
          |     translation: {  
          |       key: [
          |         "line1",
          |         "line2",
          |         "line3"
          |       ] 
          |     } 
          |   }
          | };

      .feature-description
        p The translation will be joined with '\n'.
        p
          span.badge.badge-info Hint:
          |  This might be useful in combination with post processing.

.row-fluid
  .span4
    h4.feature-title providing a default value

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { translation: { // key not found } }
          | };
          | 
          | i18n.t("key", { defaultValue: "my text" }); // -> my text

      .feature-description
        p 
          | If a resource key isn't resolvable (en-US -> en -> fallbackLng) than normally the key would be returned 
          | as string value. You can provide a better default by passing in option defaultValue.

        if target === 'client'
          p The default value will be send in sendMissing resources, too.

.row-fluid
  .span4
    a(name='nesting')
    h4.feature-title nested resources

  .span8
    .feature
      pre
        code
          | // given resources
          | {
          |   dev: { translation: { nesting1: '1 $t(nesting2)' } },
          |   en: { translation: { nesting2: '2 $t(nesting3)' } },            
          |   'en-US': { translation: {  nesting3: '3' } }
          | };
          | 
          | i18n.t("nesting1"); // -> 1 2 3

      .feature-description
        p Will return '1 2 3'.
        p All other options like plurals, ... will work as expected
        p
          span.badge.badge-info Hint:
          |  You can change pre-/suffix by setting options on init:
          ul
            li reusePrefix = '$t(',
            li reuseSuffix = ')',

.row-fluid
  .span4
    h4.feature-title nested resources with option replace

  .span8
    .feature
      pre
        code
          | // given resources
          | {
          |   dev: { translation: { girlsAndBoys_plural: '$t(girls, {"count": __girls__}) and __count__ boys' } },
          |   en: { translation: { girls_plural: '__count__ girls' } }
          | };
          | 
          | i18n.t("nesting1", {count: 2, girls: 3}); // -> 3 girls and 2 boys

      .feature-description
        p You could change interpolationPrefix/Suffix (default '__') on need.

.row-fluid
  .span4
    a(name='interpolation')
    h4.feature-title replacing variables

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { translation: {  key: '__myVar__ are important' } }
          | };
          | 
          | i18n.t("key", { myVar: "variables" }); // -> variables are important

      .feature-description
        p Will return 'variables are important'.
        p You can even have hierarchical variables in form __some.child__.
        p
          span.badge.badge-info Hint 1:
          |  You can change pre-/suffix by setting options on init or on calling t function with options:
          ul
            li interpolationPrefix = '__',
            li interpolationSuffix = '__',

        p 
          span.badge.badge-info Hint 2:
          |  You could even have nested values like:
          pre
            code
              | // given resources
              | {           
              |   'en-US': { translation: {  key: '__person.name.first__ is important' } }
              | };
              | 
              | i18n.t("key", { person: { name: { first: 'cristina' } } }); // -> cristina is important

        h6 Formating:
        p 
          span.badge.badge-info
            i.icon-money
            |  numbers or currency:
          |  You might try 
          a(href="http://adamwdraper.github.com/Numeral-js/", target="_blank") numeraljs.

        p 
          span.badge.badge-info
            i.icon-calendar
            |  dates or time:
          |  You might try 
          a(href="http://momentjs.com/", target="_blank") momentjs.

.row-fluid
  .span4
    a(name='sprintf')
    h4.feature-title sprintf support

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { translation: {  
          |     key1: 'The first 4 letters of the english alphabet are: %s, %s, %s and %s',
          |     key2: 'Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s'
          |   }}
          | };
          | 
          | i18n.t("key1", { postProcess: 'sprintf', sprintf: ['a', 'b', 'c', 'd'] });
          | i18n.t("key2", { postProcess: 'sprintf', sprintf: { users: [{name: 'Dolly'}, {name: 'Molly'}, {name: 'Polly'}] } } );

      .feature-description
        p 
          | For more information about sprintf and source go to 
          a(href='http://www.diveintojavascript.com/projects/javascript-sprintf', target='_blank') dive.into.javascript.
        p
          span.badge.badge-info Hint:
          |  You can set i18next to always postProcess with sprintf by init with option postProcess: 
          code i18n.init({ postProcess: 'sprintf' });


.row-fluid
  .span4
    a(name='plurals')
    h4.feature-title simple plural

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { 
          |     translation: {  
          |       key: '__count__  child',
          |       key_plural: '__count__  children' 
          |     } 
          |   }
          | };
          | 
          | i18n.t("key", { count: 0 }); // -> 0 children
          | i18n.t("key", { count: 1 }); // -> 1 child
          | i18n.t("key", { count: 5 }); // -> 5 children

      .feature-description
        p The variable __count__ is optional.

.row-fluid
  .span4
    h4.feature-title multiple plural forms

  .span8
    .feature
      pre
        code
          | // given resources in arabic
          | {           
          |   'ar': { 
          |     translation: {  
          |       key: 'singular',
          |       key_plural_0: 'zero',
          |       key_plural_2: 'two',
          |       key_plural_3: 'few',
          |       key_plural_11: 'many',
          |       key_plural_100: 'plural'
          |     } 
          |   }
          | };
          | 
          | i18n.t("key", { count:   0 }); // -> zero
          | i18n.t("key", { count:   1 }); // -> singular
          | i18n.t("key", { count:   2 }); // -> two
          | i18n.t("key", { count:   3 }); // -> few
          | i18n.t("key", { count:   4 }); // -> few
          | i18n.t("key", { count: 104 }); // -> few
          | i18n.t("key", { count:  11 }); // -> many
          | i18n.t("key", { count:  99 }); // -> many
          | i18n.t("key", { count: 199 }); // -> many
          | i18n.t("key", { count: 100 }); // -> plural

      .feature-description
        p What did you expect ;).
        p
          span.badge.badge-info Hint:
          |  i18next provides the functionality for all languages. 
        p
          | You can override the existing rules via 'i18n.pluralExtension.addRule(lng, obj)'
        pre
          code
            | // sample for arabic
            | i18n.pluralExtension.addRule("ar", {
            |   "name": "Arabic", 
            |   "numbers": [ 0, 1, 2, 3, 11, 100 ],
            |   "plurals": function(n) { return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5); }
            | });
        p
          | Definitions can be found 
          a(href="http://translate.sourceforge.net/wiki/l10n/pluralforms", target="_new") here.

.row-fluid
  .span4
    a(name='context')
    h4.feature-title use translation contexts

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { 
          |     translation: {  
          |       friend: 'A friend',
          |       friend_male: 'A boyfriend',
          |       friend_female: 'A girlfriend' 
          |     } 
          |   }
          | };
          | 
          | i18n.t("friend", { count: 0 }); // -> A friend
          | i18n.t("friend", { context: 'male' }); // -> A boyfriend
          | i18n.t("friend", { context: 'female' }); // -> A girlfriend

      .feature-description
        p This feature can be combined with plurals.
        p eg. key: friend_male_plural: '__count__ boyfriends'

.row-fluid
  .span4
    a(name='objecttree')
    h4.feature-title return an objectTree
    p This might be helpful if you need resources for a plugin or library like moment.js.

  .span8
    .feature
      pre
        code
          | // given resources
          | {           
          |   'en-US': { 
          |     translation: {  
          |       tree: { res: 'added' }
          |   }
          | };
          | 
          | i18n.t("tree", { returnObjectTrees: true }); // -> { res: 'added' }

      .feature-description
        p 
        p
          span.badge.badge-info Hint:
          |  All other features (variables, plurals,...) will be applied befor returning tree.
        p You can turn on this globally by setting the option in i18n.init({ returnObjectTrees: true }).

.row-fluid
  .span4
    h4.feature-title access value in different language

  .span8
    .feature
      pre
        code
          | i18n.t("my.key", { lng: "de-DE" }); // -> will get value in de-DE instead of en-US

      .feature-description
        p You should preload the additional languages on init!
        p 
          span.badge.badge-info Hint:
          if target === 'client'
            |  If the additional language wasn't preloaded it will be fetched synchronous.
          if target === 'server'
            |  If the additional language wasn't preloaded it won't return expected value.